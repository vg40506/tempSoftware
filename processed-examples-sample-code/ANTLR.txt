Use Case: ANTLR is a powerful parser generator for reading, processing, executing, or translating structured text or binary files. 

Code details and examples:
ANTLR requires grammar files to define the language syntax. An example of a grammar file in ANTLR is shown below:
```
// Sample Grammar for Arithmetic Expressions
grammar ArithmeticExpressions;

// Parser Rules
expression: additiveExpression;
additiveExpression: multiplicativeExpression (('+' | '-') multiplicativeExpression)*;
multiplicativeExpression: unaryExpression (('*' | '/') unaryExpression)*;
unaryExpression: '-' atom | atom;
atom: NUMBER;
NUMBER: [0-9]+ ('.' [0-9]+)?;
```

To generate a parser using ANTLR, you can use the ANTLR tool with the grammar file:
```
antlr ArithmeticExpressions.g4
```

After generating the parser, you can use the generated parser classes in your code to parse input files based on the defined grammar.

ANTLR provides tools for generating parsers in various languages such as Java, C#, Python, etc. Make sure to check the ANTLR documentation for language-specific details and usage.

Command to run the generated parser (for Java):
```
javac *.java
grun ArithmeticExpressions expression -tokens input.txt
```

In the above command, `grun` is a utility provided by ANTLR to test the parser on an input file (`input.txt`) for the rule `expression`. 

These are just basic examples to demonstrate the usage of ANTLR. For more complex and detailed use cases, refer to the ANTLR documentation and tutorials.