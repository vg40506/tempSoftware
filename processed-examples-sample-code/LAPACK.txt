Use Case: Linear algebra computations ; Eigenvalue calculations ; Solving linear systems of equations.

Code details and examples:

LAPACK (Linear Algebra PACKage) is a library of Fortran subroutines for solving various mathematical problems related to linear algebra. Below are some common use cases along with code snippets:

1. Solving a system of linear equations using LAPACK:

```fortran
program solve_linear_equations
    integer :: n, nrhs, lda, ldb, info
    real(kind=8), allocatable :: A(:,:), B(:,:), X(:,:)

    ! Read input parameters
    n = 3         ! Size of the system
    nrhs = 1      ! Number of right-hand sides
    lda = n       ! Leading dimension of matrix A
    ldb = n       ! Leading dimension of matrix B

    ! Allocate memory for matrices
    allocate(A(n,n), B(n,nrhs))

    ! Initialize matrix A and B with appropriate values

    ! Call LAPACK subroutine to solve the system
    call dgesv(n, nrhs, A, lda, X, ldb, info)

    ! Check the value of 'info' for successful computation

    ! Display the solution matrix X

end program solve_linear_equations
```

2. Calculating eigenvalues and eigenvectors using LAPACK:

```fortran
program calculate_eigenvalues
    integer :: n, lda, lwork, info
    real(kind=8), allocatable :: A(:,:), w(:), work(:)

    ! Read input parameters
    n = 3          ! Size of the matrix
    lda = n        ! Leading dimension of matrix A
    lwork = 3*n    ! Size of workspace array
    allocate(A(n,n), w(n), work(lwork))

    ! Initialize matrix A with appropriate values

    ! Call LAPACK subroutine to compute eigenvalues and eigenvectors
    call dgeev('N', 'V', n, A, lda, w, NULL, 1, NULL, 1, work, lwork, info)

    ! Check the value of 'info' for successful computation

    ! Display the computed eigenvalues and eigenvectors

end program calculate_eigenvalues
```

3. Singular Value Decomposition using LAPACK:

```fortran
program svd_example
    integer :: m, n, lda, ldu, ldv, lwork, info
    real(kind=8), allocatable :: A(:,:), U(:,:), VT(:,:), S(:), work(:)

    ! Read input parameters
    m = 3          ! Number of rows in matrix A
    n = 2          ! Number of columns in matrix A
    lda = m        ! Leading dimension of matrix A
    ldu = m        ! Leading dimension of matrix U
    ldv = n        ! Leading dimension of matrix VT
    lwork = max(1, 3*min(m,n) + max(m,n))    ! Size of workspace array

    allocate(A(m,n), U(m,m), VT(n,n), S(min(m,n)), work(lwork))

    ! Initialize matrix A with appropriate values

    ! Call LAPACK subroutine to perform SVD
    call dgesvd('A', 'A', m, n, A, lda, S, U, ldu, VT, ldv, work, lwork, info)

    ! Check the value of 'info' for successful computation

    ! Display the singular values and the matrices U and VT

end program svd_example
```

Please note that the actual implementation may require more details and error handling. Make sure to refer to LAPACK documentation for specific subroutines and their usage.